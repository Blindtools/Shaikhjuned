const express = require("express");
const qrcode = require("qrcode");
const fetch = require("node-fetch");
const {
  default: makeWASocket,
  useMultiFileAuthState,
  fetchLatestBaileysVersion,
  isJidGroup,
} = require("@whiskeysockets/baileys");

// --- Global Variables ---
const app = express();
let qrCodeImage = "";
let isConnected = false;
let sock;

/**
 * ржПржЗ ржлрж╛ржВрж╢ржиржЯрж┐ ржЗржЙржЬрж╛рж░рзЗрж░ ржкрж╛ржарж╛ржирзЛ ржорзЗрж╕рзЗржЬржЯрж┐ ржЖржкржирж╛рж░ ржжрзЗржУрзЯрж╛ API-рждрзЗ ржкрж╛ржарж╛рзЯ
 * ржПржмржВ рж╕рзЗржЦрж╛ржи ржерзЗржХрзЗ ржкрзНрж░рж╛ржкрзНржд ржЙрждрзНрждрж░ рж░рж┐ржЯрж╛рж░рзНржи ржХрж░рзЗред
 * @param {string} text - ржЗржЙржЬрж╛рж░рзЗрж░ ржкрж╛ржарж╛ржирзЛ ржкрзНрж░рж╢рзНржиред
 * @returns {Promise<string>} - API ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ ржЙрждрзНрждрж░ред
 */
async function getChatResponse(text) {
  // ржЖржкржирж╛рж░ ржжрзЗржУрзЯрж╛ API ржПржирзНржбржкржпрж╝рзЗржирзНржЯ
  const apiUrl = `https://chatgpt-4-hridoy.vercel.app/?question=${encodeURIComponent(text)}`;
  
  try {
    const response = await fetch(apiUrl);
    const data = await response.json();

    // API ржерзЗржХрзЗ ржкрж╛ржУрзЯрж╛ JSON ржЕржмржЬрзЗржХрзНржЯ ржерзЗржХрзЗ 'result' ржЕржВрж╢ржЯрж┐ ржмрзЗрж░ ржХрж░рзЗ ржЖржирж╛ рж╣ржЪрзНржЫрзЗ
    if (data && data.result) {
      return data.result;
    } else {
      // ржпржжрж┐ API ржХрзЛржирзЛ ржХрж╛рж░ржгрзЗ рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржирж╛ ржжрзЗрзЯ
      console.error("API Error: Invalid response structure", data);
      return "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржПржЗ ржорзБрж╣рзВрж░рзНрждрзЗ ржЙрждрзНрждрж░ ржжрж┐рждрзЗ ржкрж╛рж░ржЫрж┐ ржирж╛ред";
    }
  } catch (error) {
    console.error("Error fetching from API:", error);
    return "ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред";
  }
}

// --- Main WhatsApp Bot Logic ---
async function startWhatsApp() {
  const { state, saveCreds } = await useMultiFileAuthState("auth_info_multi");
  const { version } = await fetchLatestBaileysVersion();

  sock = makeWASocket({ version, printQRInTerminal: true, auth: state });

  // Connection ржПржмржВ Reconnection Logic
  sock.ev.on("connection.update", async (update) => {
    const { connection, lastDisconnect, qr } = update;
    if (qr) {
      qrCodeImage = await qrcode.toDataURL(qr);
    }
    if (connection === "open") {
      isConnected = true;
      console.log("тЬЕ WhatsApp Connected Successfully!");
    } else if (connection === "close") {
      isConnected = false;
      const shouldReconnect = (lastDisconnect.error)?.output?.statusCode !== 401;
      if (shouldReconnect) {
        console.log("Connection closed due to an error, reconnecting...");
        startWhatsApp();
      } else {
        console.log("Connection closed. You are logged out.");
      }
    }
  });

  // Creds рж╕рзЗржн ржХрж░рж╛рж░ ржЬржирзНржп
  sock.ev.on("creds.update", saveCreds);

  // --- Main Message Handling Logic ---
  sock.ev.on("messages.upsert", async ({ messages }) => {
    const msg = messages[0];

    // ржмржЯ ржирж┐ржЬрзЗрж░ ржорзЗрж╕рзЗржЬрзЗ ржмрж╛ ржЧрзНрж░рзБржкрзЗрж░ ржорзЗрж╕рзЗржЬрзЗ рж░рж┐ржкрзНрж▓рж╛ржЗ ржжрзЗржмрзЗ ржирж╛
    if (!msg.message || msg.key.fromMe || isJidGroup(msg.key.remoteJid)) {
      return;
    }

    const remoteJid = msg.key.remoteJid;
    const incomingText = (msg.message.conversation || msg.message.extendedTextMessage?.text || "").trim();

    // ржпржжрж┐ ржХрзЛржирзЛ ржЯрзЗржХрзНрж╕ржЯ ржорзЗрж╕рзЗржЬ ржирж╛ ржерж╛ржХрзЗ, рждрж╛рж╣рж▓рзЗ ржХрж┐ржЫрзБ ржХрж░ржмрзЗ ржирж╛
    if (!incomingText) {
      return;
    }

    try {
      await sock.readMessages([msg.key]);
      await sock.sendPresenceUpdate('composing', remoteJid); // "typing..." рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп

      // API ржерзЗржХрзЗ ржЙрждрзНрждрж░ ржЖржирж╛рж░ ржЬржирзНржп ржлрж╛ржВрж╢ржи ржХрж▓ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ
      const replyText = await getChatResponse(incomingText);

      // ржЗржЙржЬрж╛рж░рзЗрж░ ржХрж╛ржЫрзЗ ржЙрждрзНрждрж░ ржкрж╛ржарж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      await sock.sendMessage(remoteJid, { text: replyText });
      
      await sock.sendPresenceUpdate('paused', remoteJid); // "typing..." рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржмржирзНржз ржХрж░рж╛рж░ ржЬржирзНржп

    } catch (err) {
      console.error("тЭМ An error occurred in message handler:", err);
      // ржХрзЛржирзЛ рж╕ржорж╕рзНржпрж╛ рж╣рж▓рзЗ ржЗржЙржЬрж╛рж░ржХрзЗ ржЬрж╛ржирж╛ржирзЛ рж╣ржЪрзНржЫрзЗ
      await sock.sendMessage(remoteJid, { text: "тЭМ ржжрзБржГржЦрж┐ржд, ржПржХржЯрж┐ ржЕржкрзНрж░рждрзНржпрж╛рж╢рж┐ржд рж╕ржорж╕рзНржпрж╛ рж╣рзЯрзЗржЫрзЗред" });
      await sock.sendPresenceUpdate('paused', remoteJid);
    }
  });
}

// --- Express Server Setup ---
startWhatsApp();

// QR ржХрзЛржб ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп рж░рзБржЯ
app.get("/qr", (req, res) => {
    if (isConnected) {
        res.send("<h2>WhatsApp is already connected тЬЕ</h2>");
    } else if (qrCodeImage) {
        res.send(`<body style="background-color: black; display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0;"><div style="text-align: center;"><h2 style="color: white;">Scan this QR Code to Connect</h2><img src="${qrCodeImage}" alt="WhatsApp QR Code" style="width: 400px; height: 400px;"/></div></body>`);
    } else {
        res.send("<h3 style='color: white;'>Generating QR code... Please wait and refresh.</h3>");
    }
});

// рж╕рж╛рж░рзНржнрж╛рж░ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржжрзЗржЦрж╛рж░ ржЬржирзНржп
app.get("/", (req, res) => { 
    res.send(`<h2>WhatsApp Bot Server is running</h2><p>Status: ${isConnected ? 'Connected тЬЕ' : 'Disconnected тЭМ'}</p><p>To get the QR code, go to <a href="/qr">/qr</a></p>`); 
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`ЁЯЪА Server is running on port ${PORT}`));
